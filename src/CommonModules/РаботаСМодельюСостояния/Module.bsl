#Область ПрограммныйИнтерфейс

#Область Конструкторы

//  ЭлементыФормы[]
//
Функция СоздатьЭлементФормы(Схема, ИмяЭлемента) Экспорт
	НовыйЭлементФормы = Новый Структура;
	//  Измерения
	НовыйЭлементФормы.Вставить("Имя", ИмяЭлемента);
	//  Реквизиты
	НовыйЭлементФормы.Вставить("Параметр", Неопределено);
	НовыйЭлементФормы.Вставить("Таблица", Неопределено);
	НовыйЭлементФормы.Вставить("ПараметрТекущаяСтрока", Неопределено);
	НовыйЭлементФормы.Вставить("НаКлиенте", Истина);
	НовыйЭлементФормы.Вставить("ЭтоГруппа", Ложь);
	НовыйЭлементФормы.Вставить("ЭтоТаблица", Ложь);
	НовыйЭлементФормы.Вставить("ЭтоПолеВвода", Ложь);
	НовыйЭлементФормы.Вставить("ФункцияСостояния", Неопределено);
	НовыйЭлементФормы.Вставить("Порядок", 0);
	//  Связанные данные
	НовыйЭлементФормы.Вставить("Параметры", Новый Массив);//  ЭлементФормы -> ПараметрыЭлементов.Элемент
	НовыйЭлементФормы.Вставить("Свойства", Новый Массив);//  ЭлементФормы -> ПараметрыЭлементов.Элемент
	НовыйЭлементФормы.Вставить("Элементы", Новый Массив);//  ЭлементыФормы[]
	Схема.ЭлементыФормы[ИмяЭлемента] = НовыйЭлементФормы;
	Возврат НовыйЭлементФормы;
КонецФункции

//  ПараметрыЭлементов[]
//
Функция СоздатьПараметрЭлемента(Схема, Элемент, Параметр, Свойство = Неопределено, ПутьКДанным = "") Экспорт
	ИдентификаторПараметраЭлемента = ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору();
	НовыйПараметрЭлемента = Новый Структура;
	НовыйПараметрЭлемента.Вставить("Идентификатор", ИдентификаторПараметраЭлемента);
	//  Измерения
	НовыйПараметрЭлемента.Вставить("Элемент", Элемент);
	НовыйПараметрЭлемента.Вставить("Параметр", Параметр);
	НовыйПараметрЭлемента.Вставить("Свойство", Свойство);
	//  Реквизиты
	НовыйПараметрЭлемента.Вставить("ПутьКДанным", ?(НЕ ЗначениеЗаполнено(ПутьКДанным), Параметр.Имя, ПутьКДанным));
	НовыйПараметрЭлемента.Вставить("ПараметрИспользование");
	//  Связанные Данные
	Схема.ПараметрыЭлементов[ИдентификаторПараметраЭлемента] = НовыйПараметрЭлемента;
	Если ЗначениеЗаполнено(Свойство) Тогда
		Элемент.Свойства.Добавить(ИдентификаторПараметраЭлемента);
	Иначе
		Элемент.Параметры.Добавить(ИдентификаторПараметраЭлемента);
	КонецЕсли;
	Параметр.ЗависимыеЭлементы.Добавить(ИдентификаторПараметраЭлемента);
	НовыйПараметрЭлемента.Вставить("Тип");
	Возврат НовыйПараметрЭлемента;
КонецФункции

//  СвязиПараметров[]
//
Функция СоздатьСвязь(Схема, ПараметрСостояния, Параметр, ПутьКДанным, Значение = Неопределено, ПроверкаЗаполнения = Неопределено) Экспорт
	ИдентификаторСвязи = ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору();
	НоваяСвязь = Новый Структура;
	НоваяСвязь.Вставить("Идентификатор", ИдентификаторСвязи);
	//  Измерения
	НоваяСвязь.Вставить("ПараметрСостояния", ПараметрСостояния);
	НоваяСвязь.Вставить("Параметр", Параметр);
	//  Реквизиты
	НоваяСвязь.Вставить("ПутьКДанным", ПутьКДанным);
	НоваяСвязь.Вставить("Значение", Значение);
	НоваяСвязь.Вставить("ПараметрИспользование");
	НоваяСвязь.Вставить("ПроверкаЗаполнения", ПроверкаЗаполнения);
	НоваяСвязь.Вставить("Слабая", Ложь);
	//  Связанные Данные
	Схема.СвязиПараметров[ИдентификаторСвязи] = НоваяСвязь;
	ПараметрСостояния.Параметры.Добавить(ИдентификаторСвязи);
	Параметр.ЗависимыеПараметры.Добавить(ИдентификаторСвязи);
	Возврат НоваяСвязь;
КонецФункции

// Создать параметр.
// 
// Параметры:
//  Схема - Структура
//  ИмяПараметра - Строка - Имя параметра
//  Вычисляемый - Булево
// 
// Возвращаемое значение:
//  Структура - Создать параметр:
// * Имя - Строка
// * ПутьКДанным - Неопределено 
// * ЭтоТаблица - Булево -
// * Контекстный - Булево -
// * НаКлиенте - Булево -
// * ПроверкаЗаполнения - Булево -
// * ЗаполнениеПоУмолчанию - Булево -
// * ПараметрТаблица - Неопределено
// * ПараметрИспользование - Неопределено 
// * ПараметрПроверкаЗаполнения - Неопределено 
// * ПараметрЗаполнениеПоУмолчанию - Неопределено 
// * Выражение - Неопределено 
// * ИндексЗначения - Неопределено 
// * Порядок - Неопределено 
// * ОбработчикПриИзменении  - Неопределено
// * Параметры - Массив из Структура -
// * ЗависимыеПараметры - Массив из Структура -
// * ЗависимыеЭлементы - Массив из Структура -
// * Элементы - Массив из Структура -
// * ЭлементыСвязей - Массив из Структура -
// * Тип - Неопределено -
// * Вычисляемый - Булево
Функция СоздатьПараметр(Схема, ИмяПараметра, Вычисляемый = Ложь) Экспорт
	НовыйПараметрСостояния = Новый Структура;
	//  Измерения
	НовыйПараметрСостояния.Вставить("Имя", ИмяПараметра);
	НовыйПараметрСостояния.Вставить("ПутьКДанным", Неопределено);
	//  Реквизиты
	НовыйПараметрСостояния.Вставить("ЭтоТаблица", Ложь);
	НовыйПараметрСостояния.Вставить("Контекстный", Ложь);
	//  Реквизиты: Характеристики
	НовыйПараметрСостояния.Вставить("НаКлиенте", Ложь);
	НовыйПараметрСостояния.Вставить("ПроверкаЗаполнения", Истина);
	НовыйПараметрСостояния.Вставить("ЗаполнениеПоУмолчанию", Истина);
	//  Реквизиты: Таблица
	НовыйПараметрСостояния.Вставить("ПараметрТаблица", Неопределено);
	НовыйПараметрСостояния.Вставить("ПараметрОтборСтрок", Неопределено);
	НовыйПараметрСостояния.Вставить("ПараметрыКолонок", Неопределено);
	НовыйПараметрСостояния.Вставить("Ключ", Неопределено);
	//  Реквизиты: Параметризированные Характеристики	
	НовыйПараметрСостояния.Вставить("ПараметрИспользование", Неопределено);
	НовыйПараметрСостояния.Вставить("ПараметрПроверкаЗаполнения", Неопределено);
	НовыйПараметрСостояния.Вставить("ПараметрЗаполнениеПоУмолчанию", Неопределено);
	//  Вычисление И Порядок
	НовыйПараметрСостояния.Вставить("Выражение", Неопределено);
	НовыйПараметрСостояния.Вставить("ИндексЗначения", Неопределено);
	НовыйПараметрСостояния.Вставить("Порядок", Неопределено);
	НовыйПараметрСостояния.Вставить("Вычисляемый", Вычисляемый);
	//  События
	НовыйПараметрСостояния.Вставить("ОбработчикПриИзменении", Неопределено);
	//  Связи
	НовыйПараметрСостояния.Вставить("Параметры", Новый Массив);//  ПараметрСостояния -> СвязиПараметров.ПараметрСостояния
	НовыйПараметрСостояния.Вставить("ЗависимыеПараметры", Новый Массив);//  ПараметрСостояния -> СвязиПараметров.Параметр
	НовыйПараметрСостояния.Вставить("ЗависимыеЭлементы", Новый Массив);//  ПараметрСостояния -> ПараметрыЭлементов.Параметр
	НовыйПараметрСостояния.Вставить("Элементы", Новый Массив);// элементы, которые ссылаются на параметр
	НовыйПараметрСостояния.Вставить("ЭлементыСвязей", Новый Массив);// элемент, которые зависят по связям
	//  Связанные Данные
	Схема.ПараметрыСостояния[ИмяПараметра] = НовыйПараметрСостояния;
	//
	НовыйПараметрСостояния.Вставить("Тип", Неопределено);
	Возврат НовыйПараметрСостояния;
КонецФункции

// Возвращает найденный или новый параметр состояния
//  
// Параметры:
//  Схема - Структура
//  Путь - Строка - Путь к данным
//  Имя - Строка - Имя
//  Контекстный - Неопределено - Контекстный
//  Тип - Неопределено - Тип
//  Вычисляемый - Булево - значение параметра не сохраняется. Используется для параметров, которые не сериализуются, но могут быть вычислены по месту
// 
// Возвращаемое значение:
//  Структура - параметр состояния, см. СоздатьПараметр
// @skip-check method-too-many-params
Функция ПараметрСостояния(Схема, Путь = "", Имя = "", Контекстный = Неопределено, Тип = Неопределено, Вычисляемый = Ложь) Экспорт
	Перем ПараметрСостояния;
	ПутьКДанным = ?(ЗначениеЗаполнено(Путь), Путь, ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору());
	ИмяПараметра = ОбщийКлиентСервер.ЕстьПустоеЗначение(Имя, ПутьКДанным);
	ПараметрСостояния = Схема.ПараметрыСостояния[ИмяПараметра];
	Если ПараметрСостояния <> Неопределено Тогда
		Возврат ПараметрСостояния;
	КонецЕсли;
	ПараметрСостояния = СоздатьПараметр(Схема, ИмяПараметра, Вычисляемый);
	Схема.ПараметрыСостояния[ИмяПараметра] = ПараметрСостояния;
	//  Путь, Контекстный
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда
		СоставПути = СтрРазделить(ПутьКДанным, ".");
		ПутьКДаннымБазовогоПараметра = СоставПути[0];
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Схема.Объект, ПутьКДаннымБазовогоПараметра) Тогда
			ЭтоКонтекст = Ложь;
			ЭтоРеквизитИлиСвойство = Истина;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Схема.Контекст, ПутьКДаннымБазовогоПараметра) Тогда
			ЭтоКонтекст = Истина;
			ЭтоРеквизитИлиСвойство = Истина;
		Иначе
			ЭтоКонтекст = Истина;
			ЭтоРеквизитИлиСвойство = Ложь;
		КонецЕсли;
	Иначе
		ЭтоКонтекст = Истина;
		ЭтоРеквизитИлиСвойство = Ложь;
	КонецЕсли;
	ПараметрСостояния.Контекстный = ЭтоКонтекст;
	Если ЭтоРеквизитИлиСвойство Тогда
		ПараметрСостояния.ПутьКДанным = ПутьКДанным;
		Если СоставПути.Количество() = 1 Тогда
			Если ЭтоКонтекст Тогда
				Значение = Схема.Контекст[ПутьКДаннымБазовогоПараметра];
				ТипЗначения = ТипЗнч(Значение);
			Иначе
				Значение = Схема.Объект[ПутьКДаннымБазовогоПараметра];
				ТипЗначения = ТипЗнч(Значение);
			КонецЕсли;
			Если ТипЗначения = Тип("ТаблицаЗначений") Тогда
				ПараметрСостояния.ПараметрыКолонок = ПараметрыКолонок(Схема, ПараметрСостояния, Значение.Колонки);
				ПараметрСостояния.ЭтоТаблица = Истина;
			ИначеЕсли ТипЗначения = Тип("ДанныеФормыКоллекция") Тогда
				ПараметрСостояния.ПараметрыКолонок = ПараметрыКолонок(Схема, ПараметрСостояния, Значение.Выгрузить(Новый Массив).Колонки, "ИсходныйНомерСтроки, НомерСтроки");
				ПараметрСостояния.ЭтоТаблица = Истина;
			ИначеЕсли СтрНайти(ТипЗначения, "ТабличнаяЧасть.") > 0 Тогда
				ПараметрСостояния.ПараметрыКолонок = ПараметрыКолонок(Схема, ПараметрСостояния, Значение.Выгрузить(Новый Массив).Колонки, "НомерСтроки");
				ПараметрСостояния.ЭтоТаблица = Истина;
			КонецЕсли;
		Иначе
			БазовыйПараметр = ПараметрСостояния(Схема, ПутьКДаннымБазовогоПараметра);
			Если БазовыйПараметр.ЭтоТаблица Тогда
				ПараметрСостояния.ПараметрТаблица = БазовыйПараметр;			
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НЕ Вычисляемый Тогда
		Схема.ЗначенияПараметров.Добавить(Новый Структура("Параметр, Значение", ПараметрСостояния, Неопределено));
		ПараметрСостояния.ИндексЗначения = Схема.ЗначенияПараметров.Количество() - 1;
	КонецЕсли;
	Если Тип <> Неопределено Тогда
		Если ТипЗнч(Тип) = Тип("Строка") Тогда
			ПараметрСостояния.Тип = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("Булево")));
		Иначе
			ПараметрСостояния.Тип = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип));			 
		КонецЕсли;
	КонецЕсли;
	Возврат ПараметрСостояния;
КонецФункции

Функция ЭлементФормы(Схема, ЭлементИлиИмя = "ЭтаФорма") Экспорт
	//  Определить ИмяЭлемента (ИмяЭлемента|ЭтаФорма), Элемент (Элемент|ЭтаФорма)
	Если ТипЗнч(ЭлементИлиИмя) = Тип("Строка") Тогда
		ИмяЭлемента = ЭлементИлиИмя;
		Если ЭлементИлиИмя = "ЭтаФорма" Тогда
			Элемент = Схема.Контекст;
		Иначе
			Элемент = Схема.Контекст.Элементы[ИмяЭлемента];
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементИлиИмя) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяЭлемента = "ЭтаФорма";
		Элемент = Схема.Контекст;
	Иначе
		ИмяЭлемента = ЭлементИлиИмя.Имя;
		Элемент = Схема.Контекст.Элементы[ИмяЭлемента];
	КонецЕсли;
	//  Создание элемента формы модели состояния
	ЭлементФормы = Схема.ЭлементыФормы[ИмяЭлемента];
	Если ЭлементФормы <> Неопределено Тогда
		Возврат ЭлементФормы;
	КонецЕсли;
	ЭлементФормы = СоздатьЭлементФормы(Схема, ИмяЭлемента);
	Если ИмяЭлемента = "ЭтаФорма" Тогда
		Возврат ЭлементФормы;
	КонецЕсли;
	//  Донастройка элемента формы модели состояния: ЭтоТаблица, ЭтоПолеВвода, Параметр
	ТипЭлемента = ТипЗнч(Элемент);
	ПутьКДанным = "";
	Если ТипЭлемента = Тип("ТаблицаФормы") Тогда
		ЭлементФормы.ЭтоТаблица = Истина;
		ПутьКДанным = Элемент.ПутьКДанным;
	ИначеЕсли ТипЭлемента = Тип("ПолеФормы") Тогда // И Элемент.Вид = ВидПоляФормы.ПолеВвода
		ЭлементФормы.ЭтоПолеВвода = Истина;
		ПутьКДанным = Элемент.ПутьКДанным;
	КонецЕсли;
	Если СтрНачинаетсяС(ПутьКДанным, Схема.ПутьКДаннымОбъекта) Тогда
		ПутьКДанным = Прав(ПутьКДанным, СтрДлина(ПутьКДанным) - СтрДлина(Схема.ПутьКДаннымОбъекта) - 1);
	КонецЕсли;
	//  Заполнение параметра элемента
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда
		ПараметрЭлемента = ПараметрСостояния(Схема, ПутьКДанным);
		ПараметрЭлемента.Элементы.Добавить(ЭлементФормы.Имя);
		ЭлементФормы.Параметр = ПараметрЭлемента;
		//  Добавить зависимость по параметрам связей
		Если ЗначениеЗаполнено(ПараметрЭлемента.ПараметрИспользование) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрЭлемента.ПараметрИспользование.ЭлементыСвязей, ПараметрЭлемента.Элементы, Истина);
		КонецЕсли;
		Для Каждого ИдентификаторСвязи Из ПараметрЭлемента.Параметры Цикл
			ПараметрСвязи = Схема.СвязиПараметров[ИдентификаторСвязи];
			Если ЗначениеЗаполнено(ПараметрСвязи.Параметр.ПараметрИспользование) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрСвязи.Параметр.ПараметрИспользование.ЭлементыСвязей, ПараметрЭлемента.Элементы, Истина);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрСвязи.ПараметрИспользование) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрСвязи.ПараметрИспользование.ЭлементыСвязей, ПараметрЭлемента.Элементы, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ЭлементФормы;
КонецФункции

Функция Связь(Схема, ПараметрСостояния, Параметр, ПутьКДанным = "", Значение = Неопределено, ПроверкаЗаполнения = Неопределено) Экспорт
	Возврат СоздатьСвязь(Схема, ПараметрСостояния, Параметр, ?(НЕ ЗначениеЗаполнено(ПутьКДанным), Параметр.Имя, ПутьКДанным), Значение, ПроверкаЗаполнения);
КонецФункции

#КонецОбласти //  Конструкторы

#Область НастройкаЭлементовФормы

Процедура УстановитьДействие(Элемент, ИмяСобытия, Действие) Экспорт
	Если НЕ ЗначениеЗаполнено(Элемент.ПолучитьДействие(ИмяСобытия)) Тогда
		Элемент.УстановитьДействие(ИмяСобытия, Действие);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьЭлементыФормы(Схема) Экспорт
	УстановитьДействие(Схема.Контекст, "ПриОткрытии", "ПриОткрытииВМоделиФормы");
	Для Каждого Элемент Из Схема.Контекст.Элементы Цикл
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ТаблицаФормы") ИЛИ ТипЭлемента = Тип("ПолеФормы") Тогда
			ЭлементФормы = ЭлементФормы(Схема, Элемент.Имя);
			Если ТипЭлемента = Тип("ТаблицаФормы") Тогда
				ЭлементФормы.ЭтоТаблица = Истина;
				УстановитьДействие(Элемент, "ПриАктивизацииСтроки", "ПриАктивизацииСтрокиТаблицыФормы");
				Для Каждого ИмяЭлемента Из НайтиПодчиненныеЭлементы(Элемент) Цикл
					ЭлементТаблицы = ЭлементФормы(Схема, ИмяЭлемента);
					ЭлементТаблицы.Таблица = Элемент.Имя;					
				КонецЦикла;
				УстановитьДействие(Элемент, "ПередНачаломДобавления", "ПередНачаломДобавленияСтрокиТаблицыФормы");
				УстановитьДействие(Элемент, "ПередНачаломИзменения", "ПередНачаломИзмененияСтрокиТаблицыФормы");
				УстановитьДействие(Элемент, "ПередОкончаниемРедактирования", "ПередОкончаниемРедактированияСтрокиТаблицыФормы");
				УстановитьДействие(Элемент, "ПередУдалением", "ПередУдалениемСтрокиТаблицыФормы");
				УстановитьДействие(Элемент, "ПриНачалеРедактирования", "ПриНачалеРедактированияСтрокиТаблицыФормы");
				УстановитьДействие(Элемент, "ПриОкончанииРедактирования", "ПриОкончанииРедактированияСтрокиТаблицыФормы");
				УстановитьДействие(Элемент, "Выбор", "ВыборСтрокиТаблицыФормы");
				Продолжить;
			ИначеЕсли ТипЭлемента = Тип("ПолеФормы") И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				УстановитьДействие(Элемент, "НачалоВыбора", "НачалоВыбора");
				ЭлементФормы.ЭтоПолеВвода = Истина;
			КонецЕсли;
			УстановитьДействие(Элемент, "ПриИзменении", "ПриИзменении");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Процедура ОпределитьПорядок(Схема) Экспорт
	Перем ПараметрСостояния;
	Порядок = 0;
	Для Каждого КлючЗначение Из Схема.ПараметрыСостояния Цикл
		ПараметрСостояния = КлючЗначение.Значение;
		Если ЗначениеЗаполнено(ПараметрСостояния.Порядок) Тогда
			Порядок = Макс(Порядок, ПараметрСостояния.Порядок);
			Продолжить;
		КонецЕсли;
		Порядок = ПорядокПараметра(Схема, ПараметрСостояния, Порядок) + 1;
		ПараметрСостояния.Порядок = Порядок;
	КонецЦикла;
КонецПроцедуры

#Область Инициализация

Функция СхемаМодели(Контекст, ПутьКДаннымОбъекта = "Объект", МодульМодели = "") Экспорт
	Схема = Новый Структура;
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		Если ЗначениеЗаполнено(ПутьКДаннымОбъекта) Тогда
			Схема.Вставить("Объект", ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДаннымОбъекта));
		Иначе
			Схема.Вставить("Объект", Контекст);
		КонецЕсли;
		Схема.Вставить("ЭлементыФормы", Новый Соответствие);
		Схема.Вставить("ПараметрыЭлементов", Новый Соответствие);
	Иначе
		Схема.Вставить("Объект", Контекст);
	КонецЕсли;
	Схема.Вставить("ПутьКДаннымОбъекта", ПутьКДаннымОбъекта);
	Схема.Вставить("ПараметрыСостояния", Новый Соответствие);
	Схема.Вставить("СвязиПараметров", Новый Соответствие);
	Схема.Вставить("Контекст", Контекст);
	Схема.Вставить("Модуль", МодульМодели);
	Схема.Вставить("ЗначенияПараметров", Новый Массив);
	Возврат Схема;
КонецФункции
	
Процедура ПрименитьМодель(Схема) Экспорт
	МодельТаблицы = Общий.МодельТаблицы();
	МодельТаблицы.Таблица("ЗначенияПараметров")
		.Колонка("Параметр").ТипСтрока(255)
		.Колонка("Значение").ТипПроизвольный()
	;
	Контекст = Схема.Контекст;
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		НовыеРеквизиты = Новый Массив;
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПутьКДаннымОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("МодульМодели", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыСостояния", Новый ОписаниеТипов));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("СвязиПараметров", Новый ОписаниеТипов));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ЭлементыФормы", Новый ОписаниеТипов));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыЭлементов", Новый ОписаниеТипов));
		МодельТаблицы.СоздатьТаблицыВРеквизитахФормы(НовыеРеквизиты);
		Контекст.ИзменитьРеквизиты(НовыеРеквизиты);
		//  Контекст Модели
		Контекст.ПутьКДаннымОбъекта = Схема.ПутьКДаннымОбъекта;
		Контекст.МодульМодели = Схема.Модуль;
		//  Контекст Объекта
		Контекст.ПараметрыСостояния = Новый ФиксированноеСоответствие(Схема.ПараметрыСостояния);
		Контекст.СвязиПараметров = Новый ФиксированноеСоответствие(Схема.СвязиПараметров);
		//  Контекст Формы
		Контекст.ЭлементыФормы = Новый ФиксированноеСоответствие(Схема.ЭлементыФормы);
		Контекст.ПараметрыЭлементов = Новый ФиксированноеСоответствие(Схема.ПараметрыЭлементов);
		//
		Для Каждого ЭлементЗначенияПараметра Из Схема.ЗначенияПараметров Цикл
			ЗначениеПараметра = Контекст.ЗначенияПараметров.Добавить();
			ЗначениеПараметра.Значение = ЭлементЗначенияПараметра.Значение;
			ЗначениеПараметра.Параметр = ЭлементЗначенияПараметра.Параметр.Имя;
		КонецЦикла;
	Иначе
		ДополнительныеСвойства = Контекст.ДополнительныеСвойства;
		МодельТаблицы.СоздатьТаблицыВСтруктуре(ДополнительныеСвойства);
		//  Контекст Модели
		ДополнительныеСвойства.Вставить("ПутьКДаннымОбъекта", Схема.ПутьКДаннымОбъекта);
		ДополнительныеСвойства.Вставить("МодульМодели", Схема.Модуль);
		//  Контекст Объекта
		ДополнительныеСвойства.Вставить("ПараметрыСостояния", Схема.ПараметрыСостояния);
		ДополнительныеСвойства.Вставить("СвязиПараметров", Схема.СвязиПараметров);
		//
		Для Каждого ЭлементЗначенияПараметра Из Схема.ЗначенияПараметров Цикл
			ЗначениеПараметра = ДополнительныеСвойства.ЗначенияПараметров.Добавить();
			ЗначениеПараметра.Значение = ЭлементЗначенияПараметра.Значение;
			ЗначениеПараметра.Параметр = ЭлементЗначенияПараметра.Параметр.Имя;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция МодельСостояния(Контекст, ПутьКДаннымОбъекта = "Объект", МодульМодели = "Контекст") Экспорт
	Возврат Обработки.МодельСостояния
		.Создать()
		.УстановитьСхему(Контекст, ПутьКДаннымОбъекта, МодульМодели)
	;
КонецФункции

Процедура ПрименитьМодельОбъекта(Схема) Экспорт
	ОпределитьПорядок(Схема);
	ПрименитьМодель(Схема);
КонецПроцедуры

#КонецОбласти //  Инициализция

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыКолонок(Схема, ПараметрТаблицы, Колонки, ИсключитьКолонки = "")
	ОписанияКолонок = Новый Структура;
	КолонкиИсключения = ОбщийКлиентСервер.Массив(ИсключитьКолонки);
	Для Каждого Колонка Из Колонки Цикл
		Если КолонкиИсключения.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПутьКДанным = ПараметрТаблицы.ПутьКДанным + "." + Колонка.Имя;				
		ПараметрСостояния(Схема, ПутьКДанным);
		ОписанияКолонок.Вставить(Колонка.Имя, ПутьКДанным);		
	КонецЦикла;
	Возврат ОписанияКолонок;
КонецФункции	

Функция ПорядокПараметра(Схема, Параметр, Знач Порядок)
	Перем ПараметрСостояния;
	Перем Связь;
	Для Каждого Связь Из Параметр.ЗависимыеПараметры Цикл
		ПараметрСостояния = Схема.СвязиПараметров[Связь].ПараметрСостояния;		
		Если ЗначениеЗаполнено(ПараметрСостояния.Порядок) Тогда
			Порядок = Макс(Порядок, ПараметрСостояния.Порядок);
			Продолжить;
		КонецЕсли;
		Порядок = ПорядокПараметра(Схема, ПараметрСостояния, Порядок) + 1;
		ПараметрСостояния.Порядок = Порядок;
	КонецЦикла;
	Возврат Порядок;
КонецФункции

Функция НайтиПодчиненныеЭлементы(Родитель)
	НайденныеЭлементы = Новый Массив;
	Для Каждого Элемент Из Родитель.ПодчиненныеЭлементы Цикл
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ПолеФормы") Тогда
			НайденныеЭлементы.Добавить(Элемент.Имя);
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеЭлементы, НайтиПодчиненныеЭлементы(Элемент), Истина);
	КонецЦикла;
	Возврат НайденныеЭлементы;
КонецФункции

#КонецОбласти
