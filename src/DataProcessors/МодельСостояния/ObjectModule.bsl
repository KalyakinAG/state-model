///////////////////////////////////////////////////////////////////////////////////////////////////////
//  Подсистема "Модель состояния"
//	Автор: Калякин Андрей Г.
//  Описание размещено на ресурсе: https://github.com/KalyakinAG/state-model
///////////////////////////////////////////////////////////////////////////////////////////////////////
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем Контекст Экспорт;
Перем Объект Экспорт;

Перем ПутьКДаннымОбъекта Экспорт;
Перем МодульМодели Экспорт;

Перем ПараметрыСостояния Экспорт;
Перем СвязиПараметров Экспорт;
Перем ЗначенияПараметров Экспорт;  

Перем ЭлементыФормы Экспорт;
Перем ПараметрыЭлементов Экспорт;

//  Переменные Локального Состояния
Перем ПараметрСостояния Экспорт;
Перем Связь Экспорт;
Перем ЭлементФормы Экспорт;
Перем Свойство Экспорт;
Перем ПараметрЭлемента Экспорт;
Перем СтекСостояний;

#Область Типы

Функция ТипБулево() Экспорт
	ПараметрСостояния.Тип = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("Булево")));
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область Конструкторы

Функция СоздатьСостояние(Состояние = Неопределено, СписокСвойств = Неопределено)
	//@skip-check structure-consructor-too-many-keys
	НовоеСостояние = Новый Структура("ПараметрСостояния, Связь, ЭлементФормы, Свойство, ПараметрЭлемента");
	Если Состояние <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(новоеСостояние, Состояние, СписокСвойств);
	КонецЕсли;
	Возврат НовоеСостояние;
КонецФункции

//  ЭлементыФормы[]
//
Функция СоздатьЭлементФормы(ИмяЭлемента)
	НовыйЭлементФормы = Новый Структура;
	//  Измерения
	НовыйЭлементФормы.Вставить("Имя", ИмяЭлемента);
	//  Реквизиты
	НовыйЭлементФормы.Вставить("Параметр");
	НовыйЭлементФормы.Вставить("НаКлиенте", Истина);
	НовыйЭлементФормы.Вставить("ЭтоГруппа", Ложь);
	НовыйЭлементФормы.Вставить("ЭтоТаблица", Ложь);
	НовыйЭлементФормы.Вставить("ЭтоПолеВвода", Ложь);
	НовыйЭлементФормы.Вставить("ФункцияСостояния");
	НовыйЭлементФормы.Вставить("Порядок", 0);
	//  Связанные данные
	НовыйЭлементФормы.Вставить("Параметры", Новый Массив);//  ЭлементФормы -> ПараметрыЭлементов.Элемент
	НовыйЭлементФормы.Вставить("Свойства", Новый Массив);//  ЭлементФормы -> ПараметрыЭлементов.Элемент
	НовыйЭлементФормы.Вставить("Элементы", Новый Массив);//  ЭлементыФормы[]
	ЭлементыФормы[ИмяЭлемента] = НовыйЭлементФормы;
	Возврат НовыйЭлементФормы;
КонецФункции

//  ПараметрыЭлементов[]
//
Функция СоздатьПараметрЭлемента(Элемент, Параметр, Свойство = Неопределено)
	ИдентификаторПараметраЭлемента = ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору();
	НовыйПараметрЭлемента = Новый Структура;
	НовыйПараметрЭлемента.Вставить("Идентификатор", ИдентификаторПараметраЭлемента);
	//  Измерения
	НовыйПараметрЭлемента.Вставить("Элемент", Элемент);
	НовыйПараметрЭлемента.Вставить("Параметр", Параметр);
	НовыйПараметрЭлемента.Вставить("Свойство", Свойство);
	//  Реквизиты
	НовыйПараметрЭлемента.Вставить("ПутьКДанным");
	НовыйПараметрЭлемента.Вставить("ПараметрИспользование");
	//  Связанные Данные
	ПараметрыЭлементов[ИдентификаторПараметраЭлемента] = НовыйПараметрЭлемента;
	Если ЗначениеЗаполнено(Свойство) Тогда
		Элемент.Свойства.Добавить(ИдентификаторПараметраЭлемента);
	Иначе
		Элемент.Параметры.Добавить(ИдентификаторПараметраЭлемента);
	КонецЕсли;
	Параметр.ЗависимыеЭлементы.Добавить(ИдентификаторПараметраЭлемента);
	НовыйПараметрЭлемента.Вставить("Тип");
	Возврат НовыйПараметрЭлемента;
КонецФункции

//  СвязиПараметров[]
//
Функция СоздатьСвязь(ПараметрСостояния, Параметр, ПутьКДанным, Значение = Неопределено, ПроверкаЗаполнения = Неопределено)
	ИдентификаторСвязи = ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору();
	НоваяСвязь = Новый Структура;
	НоваяСвязь.Вставить("Идентификатор", ИдентификаторСвязи);
	//  Измерения
	НоваяСвязь.Вставить("ПараметрСостояния", ПараметрСостояния);
	НоваяСвязь.Вставить("Параметр", Параметр);
	//  Реквизиты
	НоваяСвязь.Вставить("ПутьКДанным", ПутьКДанным);
	НоваяСвязь.Вставить("Значение", Значение);
	НоваяСвязь.Вставить("ПараметрИспользование");
	НоваяСвязь.Вставить("ПроверкаЗаполнения", ПроверкаЗаполнения);
	НоваяСвязь.Вставить("Слабая", Ложь);
	//  Связанные Данные
	СвязиПараметров[ИдентификаторСвязи] = НоваяСвязь;
	ПараметрСостояния.Параметры.Добавить(ИдентификаторСвязи);
	Параметр.ЗависимыеПараметры.Добавить(ИдентификаторСвязи);
	Возврат НоваяСвязь;
КонецФункции

//  ПараметрыСостояния[]
//
Функция СоздатьПараметр(ИмяПараметра)
	НовыйПараметрСостояния = Новый Структура;
	//  Измерения
	НовыйПараметрСостояния.Вставить("Имя", ИмяПараметра);
	НовыйПараметрСостояния.Вставить("ПутьКДанным");
	//  Реквизиты
	НовыйПараметрСостояния.Вставить("ЭтоТаблица", Ложь);
	НовыйПараметрСостояния.Вставить("Контекстный", Ложь);
	//  Реквизиты: Характеристики
	НовыйПараметрСостояния.Вставить("НаКлиенте", Ложь);
	НовыйПараметрСостояния.Вставить("ПроверкаЗаполнения", Истина);
	НовыйПараметрСостояния.Вставить("ЗаполнениеПоУмолчанию", Истина);
	//  Реквизиты: Таблица
	НовыйПараметрСостояния.Вставить("ПараметрТаблица");
	НовыйПараметрСостояния.Вставить("ПараметрОтборСтрок");
	НовыйПараметрСостояния.Вставить("ПараметрТекущаяСтрока");
	//  Реквизиты: Параметризированные Характеристики	
	НовыйПараметрСостояния.Вставить("ПараметрИспользование");
	НовыйПараметрСостояния.Вставить("ПараметрПроверкаЗаполнения");
	НовыйПараметрСостояния.Вставить("ПараметрЗаполнениеПоУмолчанию");
	//  Вычисление И Порядок
	НовыйПараметрСостояния.Вставить("Выражение");
	НовыйПараметрСостояния.Вставить("ИндексЗначения");
	НовыйПараметрСостояния.Вставить("Порядок");
	//  События
	НовыйПараметрСостояния.Вставить("ОбработчикПриИзменении");
	//  Связи
	НовыйПараметрСостояния.Вставить("Параметры", Новый Массив);//  ПараметрСостояния -> СвязиПараметров.ПараметрСостояния
	НовыйПараметрСостояния.Вставить("ЗависимыеПараметры", Новый Массив);//  ПараметрСостояния -> СвязиПараметров.Параметр
	НовыйПараметрСостояния.Вставить("ЗависимыеЭлементы", Новый Массив);//  ПараметрСостояния -> ПараметрыЭлементов.Параметр
	НовыйПараметрСостояния.Вставить("Элементы", Новый Массив);// элементы, которые ссылаются на параметр
	НовыйПараметрСостояния.Вставить("ЭлементыСвязей", Новый Массив);// элемент, которые зависят по связям
	//  Связанные Данные
	ПараметрыСостояния[ИмяПараметра] = ПараметрыСостояния;
	//
	НовыйПараметрСостояния.Вставить("Тип", Неопределено);
	Возврат НовыйПараметрСостояния;
КонецФункции

//@skip-check method-too-many-params
Функция ПолучитьПараметрСостояния(ПутьКДанным = "", Имя = "", Контекстный = Неопределено, Тип = Неопределено)
	Перем ПараметрСостояния;
	ИмяПараметра = ОбщийКлиентСервер.ЕстьПустоеЗначение(Имя, ПутьКДанным);
	ПараметрСостояния = ПараметрыСостояния[ИмяПараметра];
	Если ПараметрСостояния <> Неопределено Тогда
		Возврат ПараметрСостояния;
	КонецЕсли;
	ПараметрСостояния = СоздатьПараметр(ИмяПараметра);
	//  Путь, Контекстный
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда
		СоставПути = СтрРазделить(ПутьКДанным, ".");
		ПутьКДаннымБазовогоПараметра = СоставПути[0];
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ПутьКДаннымБазовогоПараметра) Тогда
			ЭтоКонтекст = Ложь;
			ЭтоРеквизитИлиСвойство = Истина;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, ПутьКДаннымБазовогоПараметра) Тогда
			ЭтоКонтекст = Истина;
			ЭтоРеквизитИлиСвойство = Истина;
		Иначе
			ЭтоКонтекст = Истина;
			ЭтоРеквизитИлиСвойство = Ложь;
		КонецЕсли;
	Иначе
		ЭтоКонтекст = Истина;
		ЭтоРеквизитИлиСвойство = Ложь;
	КонецЕсли;
	Если ЭтоРеквизитИлиСвойство Тогда
		ПараметрСостояния.ПутьКДанным = ПутьКДанным;
		Если СоставПути.Количество() = 1 Тогда
			Если ЭтоКонтекст Тогда
				Значение = Контекст[ПутьКДаннымБазовогоПараметра];
				ТипЗначения = ТипЗнч(Значение);
			Иначе
				Значение = Объект[ПутьКДаннымБазовогоПараметра];
				ТипЗначения = ТипЗнч(Значение);
			КонецЕсли;
			Если (Ложь
				ИЛИ ТипЗначения = Тип("ТаблицаЗначений")
				ИЛИ ТипЗначения = Тип("ДанныеФормыКоллекция")
				ИЛИ СтрНайти(Значение, "ТабличнаяЧасть.") > 0
			)
			Тогда
				ПараметрСостояния.ПараметрТекущаяСтрока = ПолучитьПараметрСостояния(, ИмяПараметра + ".ТекущаяСтрока");
				ПараметрСостояния.ЭтоТаблица = Истина;
			КонецЕсли;
		Иначе
			БазовыйПараметр = ПолучитьПараметрСостояния(ПутьКДаннымБазовогоПараметра);
			Если БазовыйПараметр.ЭтоТаблица Тогда
				ПараметрСостояния.ПараметрТаблица = БазовыйПараметр;			
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначенияПараметров.Добавить();
		ПараметрСостояния.ИндексЗначения = ЗначенияПараметров.Количество() - 1;
	КонецЕсли;
	ПараметрСостояния.Контекстный = ЭтоКонтекст;
	ПараметрыСостояния[ИмяПараметра] = ПараметрСостояния;
	Если Тип <> Неопределено Тогда
		Если ТипЗнч(Тип) = Тип("Строка") Тогда
			ПараметрСостояния.Тип = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("Булево")));
		Иначе
			ПараметрСостояния.Тип = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип));			 
		КонецЕсли;
	КонецЕсли;
	Возврат ПараметрСостояния;
КонецФункции

#КонецОбласти //  Конструкторы

#Область Состояние

Процедура СохранитьСостояние(НаследуемыеСвойства = "")
	ТекущееСостояние = СоздатьСостояние(ЭтотОбъект);
	РаботаСМассивом.Положить(СтекСостояний, ТекущееСостояние);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СоздатьСостояние(ЭтотОбъект, НаследуемыеСвойства));
КонецПроцедуры

Процедура ВосстановитьСостояние()
	Состояние = РаботаСМассивом.Взять(СтекСостояний);
	Если Состояние = Неопределено Тогда
		//ЗаполнитьЗначенияСвойств(ЭтотОбъект, СоздатьСостояние());
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Состояние);
КонецПроцедуры

Процедура СброситьСостояние()
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СоздатьСостояние());
КонецПроцедуры

#КонецОбласти //  Состояние

#Область Операторы

// Начальное Состояние Описания. Далее Описываются Связанные Параметры. Описание Завершается Оператором Выражение:
// 	МодельСостояния.ПараметрСостояния()
// 		.Параметр()
// 		.Выражение()
// 	;
// 
// Параметры:
//  ПутьКДанным - Строка - Путь К Данным В Объекте
//  Имя - Строка - Имя Параметра
// 
// Возвращаемое Значение:
//  ОбработкаОбъект.МодельСостояния - Параметр Состояния
Функция ПараметрСостояния(ПутьКДанным = "", Имя = "") Экспорт
	СброситьСостояние();
	ПараметрСостояния = ПолучитьПараметрСостояния(ПутьКДанным, Имя);
	Возврат ЭтотОбъект;
КонецФункции

// Создает Связь Параметра С Параметром Состояния, Со Свойством Параметра Состояния,
// С Элементом Формы, Со Свойством Элемента Формы.
// Связь С Параметром Состояния Или С Его Свойством Задается Рекурсивно Через Определение Параметра Состояния.
//	МодельСостояния.ПараметрСостояния()
//		.Параметр()
//			.Использование()
//				.Параметр()
//				.Выражение()
//		.Выражение()
//	; 
//	МодельСостояния.ЭлементФормы()
//		.Свойство("Видимость")
//			.Параметр()
//			.Выражение()
//		.Параметр()
//		.ФункцияСостояния()
//	; 
// Параметры:
//  ПутьКДанным - Строка - Путь К Данным Для Использования В Выражении
//  Имя - Строка - Имя Параметра
//  ПроверкаЗаполнения - Булево
// 
// Возвращаемое Значение:
//  ОбработкаОбъект.МодельСостояния - Параметр
Функция Параметр(ПутьКДанным, Имя = "", ПроверкаЗаполнения = Неопределено) Экспорт
	ИмяПараметра = ОбщийКлиентСервер.ЕстьПустоеЗначение(Имя, ПутьКДанным);
	Параметр = ПолучитьПараметрСостояния(ИмяПараметра);
	Если ЗначениеЗаполнено(ЭлементФормы) И НЕ ЗначениеЗаполнено(Свойство) Тогда
		//  Связь Параметра С Элементом И Свойством
		ПараметрЭлемента = СоздатьПараметрЭлемента(ЭлементФормы, Параметр);
		ПараметрЭлемента.Элемент = ЭлементФормы;
		ПараметрЭлемента.Параметр = Параметр;
		ПараметрЭлемента.ПутьКДанным = ПутьКДанным;
		Возврат ЭтотОбъект;
	КонецЕсли;
	Связь = СоздатьСвязь(ПараметрСостояния, Параметр, ПутьКДанным, , ПроверкаЗаполнения);
	Если ПроверкаЗаполнения = Неопределено И (ЗначениеЗаполнено(ЭлементФормы) ИЛИ ЗначениеЗаполнено(Свойство)) Тогда
		Связь.ПроверкаЗаполнения = Ложь;
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция Слабая() Экспорт
	Связь.Слабая = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Функция ЭлементФормы(ЭлементИлиИмя = "ЭтаФорма") Экспорт
	СброситьСостояние();
	//  Определить ИмяЭлемента (ИмяЭлемента|ЭтаФорма), Элемент (Элемент|ЭтаФорма)
	Если ТипЗнч(ЭлементИлиИмя) = Тип("Строка") Тогда
		ИмяЭлемента = ЭлементИлиИмя;
		Если ЭлементИлиИмя = "ЭтаФорма" Тогда
			Элемент = Контекст;
		Иначе
			Элемент = Контекст.Элементы[ИмяЭлемента];
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементИлиИмя) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяЭлемента = "ЭтаФорма";
		Элемент = Контекст;
	Иначе
		ИмяЭлемента = ЭлементИлиИмя.Имя;
		Элемент = Контекст.Элементы[ИмяЭлемента];
	КонецЕсли;
	//  Создание элемента формы модели состояния
	ЭлементФормы = ЭлементыФормы[ИмяЭлемента];
	Если ЭлементФормы <> Неопределено Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;
	ЭлементФормы = СоздатьЭлементФормы(ИмяЭлемента);
	Если ИмяЭлемента = "ЭтаФорма" Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;
	//  Донастройка элемента формы модели состояния: ЭтоТаблица, ЭтоПолеВвода, Параметр
	ТипЭлемента = ТипЗнч(Элемент);
	ПутьКДанным = "";
	Если ТипЭлемента = Тип("ТаблицаФормы") Тогда
		ЭлементФормы.ЭтоТаблица = Истина;
		ПутьКДанным = Элемент.ПутьКДанным;
	ИначеЕсли ТипЭлемента = Тип("ПолеФормы") Тогда // И Элемент.Вид = ВидПоляФормы.ПолеВвода
		ЭлементФормы.ЭтоПолеВвода = Истина;
		ПутьКДанным = Элемент.ПутьКДанным;
	КонецЕсли;
	Если СтрНачинаетсяС(ПутьКДанным, ПутьКДаннымОбъекта) Тогда
		ПутьКДанным = Прав(ПутьКДанным, СтрДлина(ПутьКДанным) - СтрДлина(ПутьКДаннымОбъекта) - 1);
	КонецЕсли;
	//  Заполнение параметра элемента
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда
		ПараметрЭлемента = ПолучитьПараметрСостояния(ПутьКДанным);
		ПараметрЭлемента.Элементы.Добавить(ЭлементФормы.Имя);
		ЭлементФормы.Параметр = ПараметрЭлемента;
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

// Свойство Элемента Формы, Определяемое Значением Параметра. ИмяПараметраСвойства Свойства Описывается Рекурсивно Как
// ИмяПараметраСвойства Состояния: Определяются Связанные Параметры, Свойства Связей, Выражение. 
//	МодельСостояния.ЭлементФормы()
//		.Свойство("Видимость")
//		...
// 
// Параметры:
//  ИмяСвойства - Строка - Имя Свойства
//  ИмяПараметра - Строка - Имя Параметра
// 
// Возвращаемое Значение:
//  ОбработкаОбъект.МодельСостояния - Свойство
Функция Свойство(ИмяСвойства, ИмяПараметра = "") Экспорт
	СохранитьСостояние("ЭлементФормы");
	Свойство = ИмяСвойства;
	ИмяПараметраСвойства = ?(ЗначениеЗаполнено(ИмяПараметра), ИмяПараметра, ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору());
	ПараметрСостояния = ПолучитьПараметрСостояния(ИмяПараметраСвойства);
	ПараметрЭлемента = СоздатьПараметрЭлемента(ЭлементФормы, ПараметрСостояния, ИмяСвойства);
	Возврат ЭтотОбъект;
КонецФункции

Функция Использование(ИмяПараметра = "") Экспорт
	Перем ПараметрЗадан;
	ИмяПараметраСвойства = ?(ЗначениеЗаполнено(ИмяПараметра), ИмяПараметра, ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору());
	ПараметрИспользование = ПараметрыСостояния[ИмяПараметраСвойства];
	Если ЗначениеЗаполнено(ПараметрИспользование) Тогда
		ПараметрЗадан = Истина;
	Иначе
		ПараметрЗадан = Ложь;
		ПараметрИспользование = ПолучитьПараметрСостояния(ИмяПараметраСвойства, , , "Булево");
	КонецЕсли;
	Если ЗначениеЗаполнено(Связь) Тогда
		Связь.ПараметрИспользование = ПараметрИспользование;
		Если ПараметрИспользование.ЗависимыеПараметры.Найти(Связь.Идентификатор) = Неопределено Тогда
			ПараметрИспользование.ЗависимыеПараметры.Добавить(Связь.Идентификатор);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрИспользование.ЭлементыСвязей, Связь.ПараметрСостояния.Элементы, Истина);
		//  Переключение на настройку вложенного параметра
		Если ПараметрЗадан Тогда
			Возврат ЭтотОбъект;
		КонецЕсли;			
		СохранитьСостояние();
		ПараметрСостояния = ПараметрИспользование;
		Возврат ЭтотОбъект;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрЭлемента) Тогда
		ПараметрЭлемента.ПараметрИспользование = ПараметрИспользование;
		//  Переключение на настройку вложенного параметра
		Если ПараметрЗадан Тогда
			Возврат ЭтотОбъект;
		КонецЕсли;			
		СохранитьСостояние();
		ПараметрСостояния = ПараметрИспользование;
		Возврат ЭтотОбъект;
	КонецЕсли;
	ПараметрСостояния.ПараметрИспользование = ПараметрИспользование;
	СоздатьСвязь(ПараметрСостояния, ПараметрИспользование, "Использование");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрИспользование.ЭлементыСвязей, ПараметрСостояния.Элементы, Истина);
	//  Переключение на настройку вложенного параметра
	Если ПараметрЗадан Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;			
	СохранитьСостояние();
	ПараметрСостояния = ПараметрИспользование;
	Возврат ЭтотОбъект;
КонецФункции

// Оператор Выражение Завершает Описание Параметра Состояния, Свойства Параметра Состояния, Свойста Элемента.
// Все Эти Параметры Определяются Параметром Состояния Текущего Стека Состояния.
// 
// Параметры:
//  ТекстВыражения - Строка - Текст Выражения
//  НаКлиенте - Булево -
// 
// Возвращаемое Значение:
//  ОбработкаОбъект.МодельСостояния - Выражение
Функция Выражение(ТекстВыражения = "") Экспорт
	Если ПустаяСтрока(ТекстВыражения) Тогда
		ПараметрСостояния.Выражение = СтрШаблон("%1.ЗначениеПараметра%2(Параметры)", МодульМодели, ПараметрСостояния.Имя);
	Иначе
		ПараметрСостояния.Выражение = СтрЗаменить(ТекстВыражения, "'", """");
	КонецЕсли;
	ВосстановитьСостояние();
	Возврат ЭтотОбъект;
КонецФункции

Функция ФункцияСостояния(СтрокаВызоваФункции = "") Экспорт
	Если ПустаяСтрока(СтрокаВызоваФункции) ИЛИ СтрокаВызоваФункции = "*" Тогда
		ЭлементФормы.ФункцияСостояния = СтрШаблон("%1.СвойстваЭлемента%2(Свойства, Параметры)", МодульМодели, ЭлементФормы.Имя);
	Иначе
		ЭлементФормы.ФункцияСостояния = СтрЗаменить(СтрокаВызоваФункции, "'", """");
	КонецЕсли;
	ВосстановитьСостояние();
	Возврат ЭтотОбъект;
КонецФункции

Функция НаКлиенте(Значение = Истина) Экспорт
	Если ЗначениеЗаполнено(ЭлементФормы) Тогда
		ЭлементФормы.НаКлиенте = Значение;
		Возврат ЭтотОбъект;
	КонецЕсли;
	ПараметрСостояния.НаКлиенте = Значение;
	Возврат ЭтотОбъект;
КонецФункции

Функция НаСервере(Значение = Истина) Экспорт
	Возврат НаКлиенте(НЕ Значение);
КонецФункции

Функция ПриИзменении(СтрокаВызоваФункции = "") Экспорт
	Если ПустаяСтрока(СтрокаВызоваФункции) ИЛИ СтрокаВызоваФункции = "*" Тогда
		ПараметрСостояния.ОбработчикПриИзменении = СтрШаблон("%1.ПриИзмененииПараметра%2(МодельОбъекта, РасчетныйПараметр, ИзмененныеПараметры)", МодульМодели, ПараметрСостояния.Имя);
	Иначе
		ПараметрСостояния.ОбработчикПриИзменении = СтрЗаменить(СтрокаВызоваФункции, "'", """");
	КонецЕсли; 
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти// Операторы

Процедура УстановитьДействие(Элемент, ИмяСобытия, Действие) Экспорт
	Если НЕ ЗначениеЗаполнено(Элемент.ПолучитьДействие(ИмяСобытия)) Тогда
		Элемент.УстановитьДействие(ИмяСобытия, Действие);
	КонецЕсли;
КонецПроцедуры

Функция ДобавитьЭлементыФормы() Экспорт
	Для Каждого Элемент Из Контекст.Элементы Цикл
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ТаблицаФормы") ИЛИ ТипЭлемента = Тип("ПолеФормы") Тогда
			ЭлементФормы(Элемент);
			ЭлементФормы = ЭлементыФормы[Элемент.Имя];
			Если ТипЭлемента = Тип("ТаблицаФормы") Тогда
				ЭлементФормы.ЭтоТаблица = Истина;
				УстановитьДействие(Элемент, "ПриАктивизацииСтроки", "ПриАктивизацииСтроки");
			ИначеЕсли ТипЭлемента = Тип("ПолеФормы") И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				УстановитьДействие(Элемент, "НачалоВыбора", "НачалоВыбора");
				ЭлементФормы.ЭтоПолеВвода = Истина;
			КонецЕсли;
			УстановитьДействие(Элемент, "ПриИзменении", "ПриИзменении");
		КонецЕсли;
	КонецЦикла;
	Возврат ЭтотОбъект;
КонецФункции

Процедура СоздатьХранилищеСостояния() Экспорт
	ПараметрыСостояния = Новый Соответствие;
	СвязиПараметров = Новый Соответствие;
	ПараметрыЭлементов = Новый Соответствие;
	МодельТаблицы = Общий.МодельТаблицы()
	;
	МодельТаблицы.Таблица("ЗначенияПараметров")
		.Колонка("Параметр").ТипСтрока(255)
		.Колонка("Значение").ТипПроизвольный()
	;
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		ЭлементыФормы = Новый Соответствие;
		НовыеРеквизиты = Новый Массив;
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПутьКДаннымОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("МодульМодели", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыСостояния", Новый ОписаниеТипов));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("СвязиПараметров", Новый ОписаниеТипов));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ЭлементыФормы", Новый ОписаниеТипов));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыЭлементов", Новый ОписаниеТипов));
		МодельТаблицы.СоздатьТаблицыВРеквизитахФормы(НовыеРеквизиты);
		Контекст.ИзменитьРеквизиты(НовыеРеквизиты);
		//  Контекст Объекта
		ЗначенияПараметров = Контекст.ЗначенияПараметров;
		Контекст.ПутьКДаннымОбъекта = ПутьКДаннымОбъекта;
		Контекст.МодульМодели = МодульМодели;
	Иначе
		ДополнительныеСвойства = Контекст.ДополнительныеСвойства;
		МодельТаблицы.СоздатьТаблицыВСтруктуре(ДополнительныеСвойства);
		//  Контекст Объекта
		ЗначенияПараметров = ДополнительныеСвойства.ЗначенияПараметров;
		ДополнительныеСвойства.Вставить("ПутьКДаннымОбъекта", ПутьКДаннымОбъекта);
		ДополнительныеСвойства.Вставить("МодульМодели", МодульМодели);
		ДополнительныеСвойства.Вставить("ПараметрыСостояния", ПараметрыСостояния);
		ДополнительныеСвойства.Вставить("СвязиПараметров", СвязиПараметров);
	КонецЕсли;
КонецПроцедуры

#Область ОпределитьПорядок

Функция ПорядокПараметра(Параметр, Знач Порядок)
	Перем ПараметрСостояния;
	Перем Связь;
	Для Каждого Связь Из Параметр.ЗависимыеПараметры Цикл
		ПараметрСостояния = СвязиПараметров[Связь].ПараметрСостояния;		
		Если ЗначениеЗаполнено(ПараметрСостояния.Порядок) Тогда
			Порядок = Макс(Порядок, ПараметрСостояния.Порядок);
			Продолжить;
		КонецЕсли;
		Порядок = ПорядокПараметра(ПараметрСостояния, Порядок) + 1;
		ПараметрСостояния.Порядок = Порядок;
	КонецЦикла;
	Возврат Порядок;
КонецФункции

Функция ОпределитьПорядок() Экспорт
	Перем ПараметрСостояния;
	Порядок = 0;
	Для Каждого КлючЗначение Из ПараметрыСостояния Цикл
		ПараметрСостояния = КлючЗначение.Значение;
		Если ЗначениеЗаполнено(ПараметрСостояния.Порядок) Тогда
			Порядок = Макс(Порядок, ПараметрСостояния.Порядок);
			Продолжить;
		КонецЕсли;
		Порядок = ПорядокПараметра(ПараметрСостояния, Порядок) + 1;
		ПараметрСостояния.Порядок = Порядок;
	КонецЦикла;
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

Процедура Фиксировать() Экспорт
	Контекст.ПараметрыСостояния = Новый ФиксированноеСоответствие(ПараметрыСостояния);
	Контекст.ЭлементыФормы = Новый ФиксированноеСоответствие(ЭлементыФормы);
	Контекст.СвязиПараметров = Новый ФиксированноеСоответствие(СвязиПараметров);
	Контекст.ПараметрыЭлементов = Новый ФиксированноеСоответствие(ПараметрыЭлементов);
КонецПроцедуры

Функция ПрименитьМодель() Экспорт
	ЭтоКонтекстФормы = ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения");
	ОпределитьПорядок();
	Если ЭтоКонтекстФормы Тогда
		Фиксировать();
	КонецЕсли;
	МодельОбъекта = РаботаСМодельюОбъектаКлиентСервер.ПолучитьМодель(Контекст);
	Параметры = Новый Массив;
	Для Каждого _ПараметрСостояния Из МодельОбъекта.ПараметрыСостояния Цикл
		_Параметр = _ПараметрСостояния.Значение;
		ВходящиеПараметры = Новый Массив;
		Для Каждого ВходящийПараметр Из _Параметр.Параметры Цикл
			ВходящиеПараметры.Добавить(МодельОбъекта.СвязиПараметров[ВходящийПараметр].Параметр.Имя);
		КонецЦикла;
		Параметры.Добавить(Новый Структура("Имя, ЭлементыСвязей, Параметры", _Параметр.Имя, _Параметр.ЭлементыСвязей, ВходящиеПараметры));
	КонецЦикла;
	РаботаСМодельюОбъектаКлиентСервер.РассчитатьПараметрыКонтекста(МодельОбъекта);
	Если ЭтоКонтекстФормы Тогда
		РаботаСМодельюФормы.НастроитьПараметрыВыбора(МодельОбъекта);
	КонецЕсли;
	Возврат МодельОбъекта;
КонецФункции

СтекСостояний = Новый Массив;
СброситьСостояние();

#Иначе
  ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
