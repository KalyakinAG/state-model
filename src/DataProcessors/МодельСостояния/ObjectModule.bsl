Перем Схема;
Перем СтекСостояний;

//  Переменные Локального Состояния
Перем ПараметрСостояния Экспорт;
Перем Связь Экспорт;
Перем ЭлементФормы Экспорт;
Перем Свойство Экспорт;
Перем ПараметрЭлемента Экспорт;

#Область Типы

Функция ТипБулево() Экспорт
	ПараметрСостояния.Тип = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("Булево")));
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область Состояние

Функция СоздатьСостояние(Состояние = Неопределено, СписокСвойств = Неопределено)
	//@skip-check structure-consructor-too-many-keys
	НовоеСостояние = Новый Структура("ПараметрСостояния, Связь, ЭлементФормы, Свойство, ПараметрЭлемента");
	Если Состояние <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НовоеСостояние, Состояние, СписокСвойств);
	КонецЕсли;
	Возврат НовоеСостояние;
КонецФункции

Процедура СохранитьСостояние(НаследуемыеСвойства = "")
	ТекущееСостояние = СоздатьСостояние(ЭтотОбъект);
	РаботаСМассивом.Положить(СтекСостояний, ТекущееСостояние);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СоздатьСостояние(ЭтотОбъект, НаследуемыеСвойства));
КонецПроцедуры

Процедура ВосстановитьСостояние()
	Состояние = РаботаСМассивом.Взять(СтекСостояний);
	Если Состояние = Неопределено Тогда
		//ЗаполнитьЗначенияСвойств(ЭтотОбъект, СоздатьСостояние());
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Состояние);
КонецПроцедуры

Процедура СброситьСостояние()
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СоздатьСостояние());
КонецПроцедуры

#КонецОбласти //  Состояние

#Область РаботаСоСхемой

Функция УстановитьСхему(Контекст, ПутьКДаннымОбъекта = "Объект", МодульМодели = "Контекст") Экспорт
	Схема = РаботаСМодельюСостояния.СхемаМодели(Контекст, ПутьКДаннымОбъекта, МодульМодели);
	Возврат ЭтотОбъект;
КонецФункции

Функция ПолучитьСхему() Экспорт
	Возврат Схема;	
КонецФункции

#КонецОбласти

#Область ПризнакиКонтекста

Функция НаКлиенте(Значение = Истина) Экспорт
	Если ЗначениеЗаполнено(ЭлементФормы) Тогда
		ЭлементФормы.НаКлиенте = Значение;
		Возврат ЭтотОбъект;
	КонецЕсли;
	ПараметрСостояния.НаКлиенте = Значение;
	Возврат ЭтотОбъект;
КонецФункции

Функция НаСервере(Значение = Истина) Экспорт
	Возврат НаКлиенте(НЕ Значение);
КонецФункции

#КонецОбласти

#Область ПараметрыСостояния

// Начальное Состояние Описания. Далее Описываются Связанные Параметры. Описание Завершается Оператором Выражение:
// 	МодельСостояния.ПараметрСостояния()
// 		.Параметр()
// 		.Выражение()
// 	;
// 
// Параметры:
//  ПутьКДанным - Строка - Путь К Данным В Объекте
//  Имя - Строка - Имя Параметра
// 
// Возвращаемое Значение:
//  ОбработкаОбъект.МодельСостояния - Параметр Состояния
Функция ПараметрСостояния(ПутьКДанным = "", Имя = "") Экспорт
	СброситьСостояние();
	ПараметрСостояния = РаботаСМодельюСостояния.ПараметрСостояния(Схема, ПутьКДанным, Имя);
	Возврат ЭтотОбъект;
КонецФункции

Функция Слабая() Экспорт
	Связь.Слабая = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Функция Ключ(Ключ) Экспорт
	ПараметрСостояния.Ключ = Ключ;
	Возврат ЭтотОбъект;
КонецФункции

// Создает Связь Параметра С Параметром Состояния, Со Свойством Параметра Состояния,
// С Элементом Формы, Со Свойством Элемента Формы.
// Связь С Параметром Состояния Или С Его Свойством Задается Рекурсивно Через Определение Параметра Состояния.
//	МодельСостояния.ПараметрСостояния()
//		.Параметр()
//			.Использование()
//				.Параметр()
//				.Выражение()
//		.Выражение()
//	; 
//	МодельСостояния.ЭлементФормы()
//		.Свойство("Видимость")
//			.Параметр()
//			.Выражение()
//		.Параметр()
//		.ФункцияСостояния()
//	; 
// Параметры:
//  ПутьКДанным - Строка - Путь К Данным Для Использования В Выражении
//  Имя - Строка - Имя Параметра
//  ПроверкаЗаполнения - Булево
// 
// Возвращаемое Значение:
//  ОбработкаОбъект.МодельСостояния
Функция Параметр(ПутьКДанным, Имя = "", ПроверкаЗаполнения = Неопределено) Экспорт
	ИмяПараметра = ОбщийКлиентСервер.ЕстьПустоеЗначение(Имя, ПутьКДанным);
	Параметр = РаботаСМодельюСостояния.ПараметрСостояния(Схема, ИмяПараметра);
	Если ЗначениеЗаполнено(ЭлементФормы) И НЕ ЗначениеЗаполнено(Свойство) Тогда
		ПараметрЭлемента = РаботаСМодельюСостояния.СоздатьПараметрЭлемента(Схема, ЭлементФормы, Параметр, , ПутьКДанным);
	КонецЕсли;
	Связь = РаботаСМодельюСостояния.СоздатьСвязь(Схема, ПараметрСостояния, Параметр, ПутьКДанным, , ПроверкаЗаполнения);
	Если ПроверкаЗаполнения = Неопределено И (ЗначениеЗаполнено(ЭлементФормы) ИЛИ ЗначениеЗаполнено(Свойство)) Тогда
		Связь.ПроверкаЗаполнения = Ложь;
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

// Оператор Выражение Завершает Описание Параметра Состояния, Свойства Параметра Состояния, Свойста Элемента.
// Все Эти Параметры Определяются Параметром Состояния Текущего Стека Состояния.
// 
// Параметры:
//  ТекстВыражения - Строка - Текст Выражения
//  НаКлиенте - Булево -
// 
// Возвращаемое Значение:
//  ОбработкаОбъект.МодельСостояния - Выражение
Функция Выражение(ТекстВыражения = "") Экспорт
	Если ПустаяСтрока(ТекстВыражения) Тогда
		ПараметрСостояния.Выражение = СтрШаблон("%1.ЗначениеПараметра%2(Параметры)", Схема.МодульМодели, ПараметрСостояния.Имя);
	Иначе
		ПараметрСостояния.Выражение = СтрЗаменить(ТекстВыражения, "'", """");
	КонецЕсли;
	ВосстановитьСостояние();
	Возврат ЭтотОбъект;
КонецФункции

Функция ПриИзменении(СтрокаВызоваФункции = "") Экспорт
	Если ПустаяСтрока(СтрокаВызоваФункции) ИЛИ СтрокаВызоваФункции = "*" Тогда
		ПараметрСостояния.ОбработчикПриИзменении = СтрШаблон("%1.ПриИзмененииПараметра%2(МодельОбъекта, РасчетныйПараметр, ИзмененныеПараметры)", Схема.Модуль, ПараметрСостояния.Имя);
	Иначе
		ПараметрСостояния.ОбработчикПриИзменении = СтрЗаменить(СтрокаВызоваФункции, "'", """");
	КонецЕсли; 
	Возврат ЭтотОбъект;
КонецФункции

Функция Использование(ИмяПараметра = "") Экспорт
	Перем ПараметрЗадан;
	ИмяПараметраСвойства = ?(ЗначениеЗаполнено(ИмяПараметра), ИмяПараметра, ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору());
	ПараметрИспользование = Схема.ПараметрыСостояния[ИмяПараметраСвойства];
	Если ЗначениеЗаполнено(ПараметрИспользование) Тогда
		ПараметрЗадан = Истина;
	Иначе
		ПараметрЗадан = Ложь;
		ПараметрИспользование = РаботаСМодельюСостояния.ПараметрСостояния(Схема, ИмяПараметраСвойства, , , "Булево");
	КонецЕсли;
	Если ЗначениеЗаполнено(Связь) Тогда
		//  Параметр применяется к связи
		Связь.ПараметрИспользование = ПараметрИспользование;
		Если ПараметрИспользование.ЗависимыеПараметры.Найти(Связь.Идентификатор) = Неопределено Тогда
			ПараметрИспользование.ЗависимыеПараметры.Добавить(Связь.Идентификатор);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрИспользование.ЭлементыСвязей, Связь.ПараметрСостояния.Элементы, Истина);
		//  Переключение на настройку вложенного параметра
		Если ПараметрЗадан Тогда
			Возврат ЭтотОбъект;
		КонецЕсли;			
		СохранитьСостояние();
		ПараметрСостояния = ПараметрИспользование;
		Возврат ЭтотОбъект;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрЭлемента) Тогда
		//  Параметр применяется к параметру к элементу формы
		ПараметрЭлемента.ПараметрИспользование = ПараметрИспользование;
		РаботаСМодельюСостояния.СоздатьСвязь(Схема, ПараметрЭлемента, ПараметрИспользование, "Использование");// Фиктивная связь с параметром признака Использование
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрИспользование.ЭлементыСвязей, ПараметрЭлемента.Элементы, Истина);
		//  Переключение на настройку вложенного параметра
		Если ПараметрЗадан Тогда
			Возврат ЭтотОбъект;
		КонецЕсли;			
		СохранитьСостояние();
		ПараметрСостояния = ПараметрИспользование;
		Возврат ЭтотОбъект;
	КонецЕсли;
	//  Параметр применяется к параметру, возможно рекурсивно (ЭлементФормы-ПараметрЭлемента-ПараметрИспользование)
	ПараметрСостояния.ПараметрИспользование = ПараметрИспользование;
	РаботаСМодельюСостояния.СоздатьСвязь(Схема, ПараметрСостояния, ПараметрИспользование, "Использование");// Фиктивная связь с параметром признака Использование
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрИспользование.ЭлементыСвязей, ПараметрСостояния.Элементы, Истина);
	//  Переключение на настройку вложенного параметра
	Если ПараметрЗадан Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;			
	СохранитьСостояние();
	ПараметрСостояния = ПараметрИспользование;
	Возврат ЭтотОбъект;
КонецФункции

Функция ТекущаяСтрока(Знач ИмяПараметра = "") Экспорт
	Если НЕ ЗначениеЗаполнено(ЭлементФормы) Тогда
		ВызватьИсключение "Не выбран элемент формы для определения параметра  ТекущаяСтрока";
	КонецЕсли;
	Если ИмяПараметра = "" Тогда
		ИмяПараметра = ЭлементФормы.Имя + ".ТекущаяСтрока";
	КонецЕсли;
	ПараметрТекущаяСтрока = Схема.ПараметрыСостояния[ИмяПараметра];
	Если ЗначениеЗаполнено(ПараметрТекущаяСтрока) Тогда
		ЭлементФормы.ПараметрТекущаяСтрока = ПараметрТекущаяСтрока;
	Иначе
		ЭлементФормы.ПараметрТекущаяСтрока = РаботаСМодельюСостояния.ПараметрСостояния(Схема, , ИмяПараметра);
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область ЭлементыФормы

Функция ЭлементФормы(ЭлементИлиИмя = "ЭтаФорма") Экспорт
	СброситьСостояние();
	ЭлементФормы = РаботаСМодельюСостояния.ЭлементФормы(Схема, ЭлементИлиИмя); 
	Возврат ЭтотОбъект;
КонецФункции

Функция ФункцияСостояния(СтрокаВызоваФункции = "") Экспорт
	Если ПустаяСтрока(СтрокаВызоваФункции) ИЛИ СтрокаВызоваФункции = "*" Тогда
		ЭлементФормы.ФункцияСостояния = СтрШаблон("%1.СвойстваЭлемента%2(Свойства, Параметры)", Схема.Модуль, ЭлементФормы.Имя);
	Иначе
		ЭлементФормы.ФункцияСостояния = СтрЗаменить(СтрокаВызоваФункции, "'", """");
	КонецЕсли;
	ВосстановитьСостояние();
	Возврат ЭтотОбъект;
КонецФункции

// Свойство Элемента Формы, Определяемое Значением Параметра. ИмяПараметраСвойства Свойства Описывается Рекурсивно Как
// ИмяПараметраСвойства Состояния: Определяются Связанные Параметры, Свойства Связей, Выражение. 
//	МодельСостояния.ЭлементФормы()
//		.Свойство("Видимость")
//		...
// 
// Параметры:
//  ИмяСвойства - Строка - Имя Свойства
//  ИмяПараметра - Строка - Имя Параметра
// 
// Возвращаемое Значение:
//  ОбработкаОбъект.МодельСостояния - Свойство
Функция Свойство(ИмяСвойства, ИмяПараметра = "") Экспорт
	СохранитьСостояние("ЭлементФормы");
	Свойство = ИмяСвойства;
	ПараметрСостояния = РаботаСМодельюСостояния.ПараметрСостояния(Схема, ИмяПараметра, , , , Истина);
	ПараметрЭлемента = РаботаСМодельюСостояния.СоздатьПараметрЭлемента(Схема, ЭлементФормы, ПараметрСостояния, ИмяСвойства);
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

Функция ПрименитьМодель() Экспорт
	Контекст = Схема.Контекст;
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		РаботаСМодельюСостояния.ДобавитьЭлементыФормы(Схема);
		РаботаСМодельюСостояния.ПрименитьМодельОбъекта(Схема);
		МодельОбъекта = РаботаСМодельюОбъектаКлиентСервер.ПолучитьМодель(Контекст);
		РаботаСМодельюОбъектаКлиентСервер.РассчитатьПараметрыКонтекста(МодельОбъекта);
		РаботаСМодельюФормы.НастроитьПараметрыВыбора(МодельОбъекта);
		//@skip-check empty-except-statement
		Попытка
			РаботаСМодельюСостояния.УстановитьДействие(Контекст, "ПриЧтенииНаСервере", "ПриЧтенииВМоделиФормыНаСервере");
			РаботаСМодельюСостояния.УстановитьДействие(Контекст, "ПослеЗаписиНаСервере", "ПослеЗаписиВМоделиФормыНаСервере");
		Исключение
		КонецПопытки;
	Иначе
		РаботаСМодельюСостояния.ПрименитьМодельОбъекта(Схема);
		МодельОбъекта = РаботаСМодельюОбъектаКлиентСервер.ПолучитьМодель(Контекст);
		РаботаСМодельюОбъектаКлиентСервер.РассчитатьПараметрыКонтекста(МодельОбъекта);
	КонецЕсли;
	Возврат МодельОбъекта;
КонецФункции

СтекСостояний = Новый Массив;
СброситьСостояние();
